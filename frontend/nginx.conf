server {
    # listen [::]443 ssl;
    listen 443 ssl;
    server_name localhost;

    ssl_certificate         /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key     /etc/nginx/certs/privkey.pem;

    root /usr/share/nginx/html;
    index index.html;

    # Serve static files
    location /static/ {
        alias /usr/share/nginx/html/static/;  # Path to static files in the Nginx container
    }

    # Serve media files
    location /media/ {
        alias /usr/share/nginx/html/media/;  # Path to media files in the Nginx container
    }

    # Proxy requests to /game_server to the Django backend
    location / {
        proxy_pass http://backend:8000/;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # location /api/ {
    #     proxy_pass http://backend:8000/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
        
    #     # Add timeout settings
    #     proxy_connect_timeout 75s;
    #     proxy_read_timeout 300s;
    # }

    # Optional caching for static files ???
    # location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf|eot|ttf)$ {
    #     root /usr/share/nginx/html;
    #     expires max;
    #     add_header Cache-Control "public";
    # }

    location /ws/ {
        proxy_pass http://backend:8000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    error_page 404 /index.html;
}

server {
    listen 80;
    server_name localhost;

    return 301 https://$host$request_uri;
}
